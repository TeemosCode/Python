102306061 資管四甲 何秉哲

============================================執行方式============================================

    DFS:
	以Stack作為同時存取資料內容和控制整個搜尋流程以達到DFS目的的容器，用以容納每個節點以及該節點的相關資訊。
	在每次執行邏輯的loop中，以一個擁有3個element的tuple作為每一筆放入stack內的資料，其中的elements依序為現在所pop出並要對它執行邏輯判斷的node,以及其走到該node的路徑和cost。
	之所以要以這種模式存取的原因為，stack這個資料結構會在push與pop的過程當中，幫我們歸類好DFS搜尋node的正確順序，將每個node所經過的path依序存入可擴充的list並存放在同一個tuple裡，以存取每點不同node所經過的路徑，並也能作為下一個node路徑的基礎、同時node之間也不會互相影響彼此的路徑紀錄。而不正確的路徑會自然地被stack給pop掉而消失，而stack內最後走到goal的node，裡面存放、紀錄所經過的路徑的list不會受到其他被pop掉的node影響。
	同時，在進入loop前先訂一好一個set(其實也可以是list或dictionary,只要是mutable的資料結構都行)作為一個紀錄走過的node的container。並在每次loop過不同node時，觀察該node是否已經被展開過並對這個容器進行update(“append()”, “+”, “add()” …)，保持整體的完整紀錄。

    BFS：
	概念相同，大同小異。唯一最大差別是須以Queue結構當作container，因為Queue的pop及push會使放在裡面的資料(node)按照BFS定義的順序，層層往下搜尋、展開並做紀錄。



============================================實作心得============================================
	身為一位資料結構全部忘的一乾二淨、沒學過演算法（現正努力旁聽中）的資管系學生，這作業對我來說有些難度。難度在於即使花了許多時間查詢、研究、了解演算法和整體流程，並花了3個小時不斷重寫同一份code，還是無法將思想正確的轉為code，無法想出如何將一個演算法正確的套用於一個問題上、寫出正確的code。雖然遭受了極大挫折，但最後弄懂並寫出的過程還是讓我非常enjoy這個學習process。
	希望老師能多花點時間，解釋一下不同algorithm的pseudo code以及一些可以活用這些code的例子，因為能從bottom up獨立想出如何用code實作解決問題真的是件令人爽快的事，而我十分希望老師如果能在每種不同演算法中花一點點時間細講一下必定能讓少數像我一樣還正在努力培養解題能力的人獲得無比的幫助。



=========================================如何解決遇到的困難=========================================
	原本期許自己從頭搞懂並不要尋求任何幫助獨自想出與完成這個作業。然而發現自己這樣還是花了太多時間，不只做不出東西來、也沒從過程中學習到任何東西（畢竟也是自己腦子一直轉到錯誤的方式）。最後不得已、不情願地到google上查詢他人的各種解法與code，花一段時間看懂、內化後再以他們的邏輯將答案寫出來。雖然最後只能以這種方式做，也瞭解並內化了他人的解題技巧，但這讓我感到空空的。畢竟還是受他人影響而非獨自從頭將答案想出來的，讓我也些沮喪。更重要的事，我寫出了兩種解法，雖然最終的答案正確，解題過程卻不相同所以有一種解法會在特定問題產生FAIL。而細看程式碼，兩種極度相似，想了半天還是不了解。希望這週的課能找了師討論，找出問題的所在之處。
（在dfs與bfs的function內的第一個版本是正確的，後面的會出錯[自己有加註解]，但過執行過程是會執行正確的[第一個]，所以都PASS）
